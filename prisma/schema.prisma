// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                String   @id @default(cuid())
  address           String   @unique
  lastSignIn        DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  clients           Client[]
  streams           Stream[]
  profile           Profile?
  ensName           String?
  issuedInvoices    Invoice[] @relation("IssuedInvoices")
  receivedInvoices  Invoice[] @relation("ReceivedInvoices")
}

model Profile {
  id        String   @id @default(cuid())
  nickname  String
  username  String
  bio       String?
  website   String?
  email     String?
  profilePicture String?
  peopleWorkedWith Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Client {
  id        String   @id @default(cuid())
  name      String
  imageUrl  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  transactions Transaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id            String   @id @default(cuid())
  invoiceHash   String   @unique
  issuerAddress String
  clientAddress String
  tokenAddress  String
  amount        String
  dueDate       DateTime
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  issuer        User     @relation("IssuedInvoices", fields: [issuerAddress], references: [address])
  client        User     @relation("ReceivedInvoices", fields: [clientAddress], references: [address])
}

model Transaction {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique
  amount        Float
  status        String
  description   String
  date          DateTime
  client        Client   @relation(fields: [clientId], references: [id])
  clientId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Stream {
  id              String   @id @default(cuid())
  name            String
  direction       String
  address         String
  token           String
  amountPerPeriod Float
  period          String
  totalStreamed   Float
  isWithdrawable  Boolean
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// You can add other models here as needed for your application
